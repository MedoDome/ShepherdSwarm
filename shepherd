#!/bin/bash

set -euo pipefail

server_version() {
    docker version -f "{{.Server.Version}}"
}

update_services() {
    local blacklist="$1"
    local supports_detach_option=$2
    local supports_registry_auth=$3
    local detach_option=""
    local registry_auth=""

    [ $supports_detach_option = true ] && detach_option="--detach=false"
    [ $supports_registry_auth = true ] && registry_auth="--with-registry-auth"

    for service in $(IFS="\n" docker service ls --quiet --filter "${FILTER_SERVICES}"); do
        local name image_with_digest image pulled_image
        name="$(docker service inspect "$service" -f '{{.Spec.Name}}')"
        echo "Blacklist $blacklist";
        echo "Name $name";
        if [[ " $blacklist " != *" $name "* ]]; then
            
            image_with_digest="$(docker service inspect "$service" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')" 

            image=$(echo "$image_with_digest" | cut -d@ -f1) 

            #Download locally image 
            #TODO Make possible remote check

            docker pull $image

            #Get image
            pulled_image="$(docker inspect --format='{{index .RepoDigests 0}}' $image)"

            #Removing :latest tag from image

            image_without_tag=${image_with_digest/:latest}

            if [ "$pulled_image" != "$image_without_tag" ]; then

            echo "Trying to update service $name with image $pulled_image"

            echo "Pulled image: $pulled_image / Original image $image_without_tag"

            docker service update "$service" $detach_option $registry_auth --image="$pulled_image" > /dev/null

                if [ "$name" == "beboo_beboo-api"  ]; then
                    echo "Upstreaming beboo ws";
                    echo "Creating upstream file"
                    docker ps | grep beboo_beboo-api. | cut -d " " -f1  |  xargs docker inspect --format '{{ $network := index .NetworkSettings.Networks "nginx_nginx-proxy" }}{{ $network.IPAddress}}' | xargs -I {} echo server {}:8090\; > upstream.conf

                    cat upstream.conf

                    docker ps | grep nginx_nginx.1. | cut -d " " -f1  | xargs -I {} docker cp upstream.conf {}:/etc/nginx/upstream.conf
                    docker ps | grep nginx_nginx.1. | cut -d " " -f1  | xargs -I '{}' docker exec  {} nginx -s reload

                fi

            previousImage=$(docker service inspect "$service" -f '{{.PreviousSpec.TaskTemplate.ContainerSpec.Image}}')
            currentImage=$(docker service inspect "$service" -f '{{.Spec.TaskTemplate.ContainerSpec.Image}}')
            
            if [ "$previousImage" == "$currentImage" ]; then
                echo "No updates to service $name!"
            else
                echo "Service $name was updated!"
            fi

            else
            echo "Container is running updated image"
            fi

        else
            echo "Skipping blacklisted $name"
        fi
    done
}

main() {
    local blacklist sleep_time supports_detach_option supports_registry_auth
    blacklist="${BLACKLIST_SERVICES:-}"
    sleep_time="${SLEEP_TIME:-5m}"

    supports_detach_option=false
    if [[ "$(server_version)" > "17.05" ]]; then
        supports_detach_option=true
        echo "Enabling synchronous service updates"
    fi

    supports_registry_auth=false
    if [[ ${WITH_REGISTRY_AUTH+x} ]]; then
        supports_registry_auth=true
        echo "Send registry authentication details to swarm agents"
    fi

    [[ "$blacklist" != "" ]] && echo "Excluding services: $blacklist"

    while true; do
        update_services "$blacklist" "$supports_detach_option" "$supports_registry_auth"
        echo "Sleeping $sleep_time before next update"
        sleep "$sleep_time"
    done
}

main "$@"                                                                                                                                                                               92,1          Bot